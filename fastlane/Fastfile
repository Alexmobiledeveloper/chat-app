# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
#update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.97.2"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."   
  end
  
  desc "Check all certs and provisioning profiles from github"
  lane :certs do
    app_root = "com.irccloud."
    for type in ["appstore", "adhoc", "development"] do
      match(type: type, app_identifier: "#{app_root}IRCCloud")
      match(type: type, app_identifier: "#{app_root}IRCCloud.ShareExtension")
      match(type: type, app_identifier: "#{app_root}enterprise")
      match(type: type, app_identifier: "#{app_root}enterprise.ShareExtension")
      match(type: type, app_identifier: "#{app_root}UITests")
    end
  end

  desc "Build and push to iTunes Connect"
  lane :push do |options|
    if options[:enterprise]
        ipa = "IRCEnterprise.ipa"
        scheme = "IRCCloud Enterprise"
    else
        ipa = "IRCCloud.ipa"
        scheme = "IRCCloud"
    end
    
    # Set a build number manually if provided
    # TODO pull this from the Info.plist
    default_build_number = "GIT_VERSION"
    if options[:build]
        increment_build_number(build_number: options[:build])
    end
    
    # Build an ipa
    gym(scheme: scheme)
    
    # Reset the build number
    if options[:build]
        increment_build_number(build_number: default_build_number)
    end
    
    # Upload to iTunes Connect
    deliver(
        ipa: ipa,
        skip_metadata: true,
        skip_screenshots: true
    )
  end
  
  desc "Take screenshots"
  lane :screenshots do
    snapshot(
        clear_previous_screenshots: true,
        skip_open_summary: true,
        devices: []
    )
    for device in [
      "iPhone 6",
      "iPhone 5",
      "iPhone 4s",
      "iPad Retina",
      "iPad Pro",
      "iPhone 6 Plus"
    ] do
      snapshot(
        clear_previous_screenshots: false,
        skip_open_summary: true,
        devices: [device],
        launch_arguments: ["-FASTLANE_SNAPSHOT_DEVICE \"#{device}\""],
      )
    end
    notification(
      subtitle: "screenshots",
      message: "iOS screenshots complete",
      activate: "com.googlecode.iterm2"
    )
  end

  desc "Upload metadata"
  lane :metadata do
    deliver(skip_binary_upload: true)
  end

  #desc "Runs all the tests"
  #lane :test do
  #  scan
  #end

  desc "Make sure all devices are added to the ad-hoc profile"
  lane :updateadhoc do
    match(type: "adhoc", force_for_new_devices: true, app_identifier: "com.irccloud.IRCCloud")
    match(type: "adhoc", force_for_new_devices: true, app_identifier: "com.irccloud.IRCCloud.ShareExtension")
  end

  desc "Build and upload an ad-hoc release to Crashlytics"
  lane :beta do
    match(type: "adhoc", readonly: true, app_identifier: "com.irccloud.IRCCloud")
    match(type: "adhoc", readonly: true, app_identifier: "com.irccloud.IRCCloud.ShareExtension")
    
    root_directory = "#{File.expand_path(File.dirname(__FILE__))}/../"
    CRASHLYTICS_TOKEN=Fastlane::Actions.sh_control_output("grep CRASHLYTICS_TOKEN #{root_directory}IRCCloud/config.h | awk '{print $3}' | sed 's/\"//g'",print_command_output: false).strip
    CRASHLYTICS_SECRET=Fastlane::Actions.sh_control_output("grep CRASHLYTICS_SECRET #{root_directory}IRCCloud/config.h | awk '{print $3}' | sed 's/\"//g'",print_command_output: false).strip

    raise "Missing Crashlytics API key" unless CRASHLYTICS_TOKEN != ''
    raise "Missing Crashlytics API secret" unless CRASHLYTICS_SECRET != ''

    notes = prompt(text: "Release Notes: ", multi_line_end_keyword: "$")

    gym(scheme: "IRCCloud", export_method: "ad-hoc", clean: true, configuration: "Release")

    crashlytics(api_token: CRASHLYTICS_TOKEN, build_secret: CRASHLYTICS_SECRET, groups: ["irccloud","ios-testers","ios-public-beta"], notes: notes)
  end

  #desc "Deploy a new version to the App Store"
  #lane :appstore do
    # match(type: "appstore")
    # snapshot
    ## gym(scheme: "IRCCloud") # Build your app - more options available
    ## deliver(force: true)
    # frameit
  #end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
#
